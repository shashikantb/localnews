
// This file is intentionally left blank. 
// It's a placeholder for the service worker generated by the 'next-pwa' plugin.
// The actual service worker code will be injected during the build process.
// However, this file must exist for the service worker registration in the browser to succeed during development.
// For Firebase Messaging, the necessary import scripts will be added by the 'next-pwa' configuration.

// Scripts for Firebase
importScripts("https://www.gstatic.com/firebasejs/9.2.0/firebase-app-compat.js");
importScripts("https://www.gstatic.com/firebasejs/9.2.0/firebase-messaging-compat.js");

// This is the config from your Firebase project.
// It's safe to expose these values.
const firebaseConfig = {
    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

firebase.initializeApp(firebaseConfig);

const messaging = firebase.messaging();

messaging.onBackgroundMessage((payload) => {
    console.log("Received background message ", payload);

    const notificationTitle = payload.notification.title;
    const notificationOptions = {
        body: payload.notification.body,
        icon: '/icons/icon-192x192.png'
    };

    self.registration.showNotification(notificationTitle, notificationOptions);
});

// This event listener is for handling clicks on the notification.
self.addEventListener('notificationclick', (event) => {
    event.notification.close();
    
    // This looks for an existing window and focuses it.
    // If no window is found, it opens a new one.
    event.waitUntil(clients.matchAll({
        type: 'window',
        includeUncontrolled: true,
    }).then((clientList) => {
        for (let i = 0; i < clientList.length; i++) {
            let client = clientList[i];
            if (client.url === '/' && 'focus' in client) {
                return client.focus();
            }
        }
        if (clients.openWindow) {
            return clients.openWindow('/');
        }
    }));
});
